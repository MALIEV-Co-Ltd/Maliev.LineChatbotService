name: Production Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  PROJECT_ID: maliev-website
  GAR_LOCATION: asia-southeast1
  REGISTRY_REPO: maliev-website-artifact
  SERVICE: maliev-line-chatbot-service
  ENVIRONMENT: production

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run linting
      run: |
        cd backend
        ruff check src/ tests/
        mypy src/

    - name: Run tests
      run: |
        cd backend
        pytest --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-production

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine version and tag
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # Tagged release
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_tag=true" >> $GITHUB_OUTPUT
          echo "tag_type=release" >> $GITHUB_OUTPUT
        else
          # Main branch push
          VERSION="v$(date +%Y.%m.%d)-$(date +%H%M)-${GITHUB_SHA:0:7}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_tag=false" >> $GITHUB_OUTPUT
          echo "tag_type=snapshot" >> $GITHUB_OUTPUT
        fi

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: Create Dockerfile
      run: |
        cat > backend/Dockerfile << 'EOF'
        FROM python:3.11-slim

        # Set working directory
        WORKDIR /app

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            curl \
            && rm -rf /var/lib/apt/lists/*

        # Copy requirements first for better caching
        COPY requirements.txt .
        COPY requirements-dev.txt .

        # Install Python dependencies
        RUN pip install --no-cache-dir -r requirements.txt

        # Copy application code
        COPY . .

        # Create non-root user
        RUN useradd --create-home --shell /bin/bash app \
            && chown -R app:app /app
        USER app

        # Health check
        HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:8000/health || exit 1

        # Expose port
        EXPOSE 8000

        # Run the application
        CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]
        EOF

    - name: Build and push Docker image
      run: |
        cd backend
        IMAGE_TAG="${{ steps.version.outputs.version }}"
        IMAGE_URI=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REGISTRY_REPO/$SERVICE:$IMAGE_TAG
        
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        
        # Tag as latest for production
        LATEST_URI=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REGISTRY_REPO/$SERVICE:latest
        docker tag $IMAGE_URI $LATEST_URI
        docker push $LATEST_URI
        
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Update GitOps Repository
      uses: actions/checkout@v4
      with:
        repository: MALIEV-Co-Ltd/maliev-gitops
        token: ${{ secrets.GITOPS_TOKEN }}
        path: gitops

    - name: Update production deployment
      run: |
        cd gitops
        
        # Configure git
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@maliev.com"
        
        # Update image in kustomization.yaml
        KUSTOMIZATION_FILE="3-apps/line-chatbot-service/overlays/production/kustomization.yaml"
        
        if [ -f "$KUSTOMIZATION_FILE" ]; then
          # Update or add newTag
          if grep -q "newTag:" $KUSTOMIZATION_FILE; then
            sed -i "s|newTag:.*|newTag: $IMAGE_TAG|" $KUSTOMIZATION_FILE
          else
            sed -i "/newName:/a \  newTag: $IMAGE_TAG" $KUSTOMIZATION_FILE
          fi
          
          # Commit and push changes
          git add $KUSTOMIZATION_FILE
          git commit -m "🚀 Deploy to production: $SERVICE:$IMAGE_TAG

          - Environment: Production
          - Version: ${{ steps.version.outputs.version }}
          - Type: ${{ steps.version.outputs.tag_type }}
          - Image: $IMAGE_URI
          - Commit: ${{ github.sha }}
          
          🤖 Generated with [Claude Code](https://claude.ai/code)
          Co-Authored-By: Claude <noreply@anthropic.com)"
          git push
        else
          echo "❌ Kustomization file not found: $KUSTOMIZATION_FILE"
          exit 1
        fi

    - name: Create GitHub Release (for tags only)
      if: steps.version.outputs.is_tag == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: LINE Chatbot Service ${{ steps.version.outputs.version }}
        body: |
          ## 🚀 LINE Chatbot Service Release ${{ steps.version.outputs.version }}
          
          ### 📦 Deployment Information
          - **Environment**: Production
          - **Image**: `${{ env.IMAGE_URI }}`
          - **Commit**: `${{ github.sha }}`
          - **Deployed**: `$(date -u +'%Y-%m-%d %H:%M:%S UTC')`
          
          ### 🌐 Service URLs
          - **Production**: https://line-chatbot.maliev.com
          - **Health Check**: https://line-chatbot.maliev.com/health
          - **Admin Panel**: https://line-chatbot.maliev.com/admin
          
          ### 🔧 Features & Changes
          - Multi-provider AI integration (Gemini 2.5-flash, OpenAI, DeepSeek)
          - Intelligent LLM response caching (40-70% cost reduction)
          - Dynamic system instructions for 3D printing business
          - Customer management and analytics
          - Redis-based session and cache management
          
          ### 🏗️ Technical Details
          - **Framework**: FastAPI with async Python
          - **AI Providers**: Primary Gemini 2.5-flash with fallbacks
          - **Database**: Redis for caching and configuration
          - **Secrets**: Google Secret Manager integration
          - **Monitoring**: Structured logging with correlation IDs
          
          🤖 Auto-generated release by GitHub Actions
        draft: false
        prerelease: false

    - name: Production deployment summary
      run: |
        echo "🎉 Production deployment completed successfully!"
        echo "📦 Version: ${{ steps.version.outputs.version }}"
        echo "🏷️ Type: ${{ steps.version.outputs.tag_type }}"
        echo "🚀 Image: $IMAGE_URI"
        echo "🌐 URL: https://line-chatbot.maliev.com"
        echo "📝 Commit: ${{ github.sha }}"

    - name: Post deployment verification
      run: |
        echo "⏳ Waiting for production deployment to stabilize..."
        sleep 60
        echo "🔍 Production deployment verification:"
        echo "  1. Health Check: https://line-chatbot.maliev.com/health"
        echo "  2. Admin Panel: https://line-chatbot.maliev.com/admin"
        echo "  3. LINE Webhook: https://line-chatbot.maliev.com/webhook"
        echo "✅ Production deployment ready!"