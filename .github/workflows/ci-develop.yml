name: CI - Develop

on:
  push:
    branches:
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run linting
      run: |
        cd backend
        ruff check src/ tests/
        mypy src/

    - name: Run tests
      run: |
        cd backend
        pytest --cov=src --cov-report=xml --cov-report=term-missing

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v3
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v3
      with:
        project_id: maliev-website

    - name: Build and push Docker image
      run: |
        cd backend
        gcloud auth configure-docker asia-southeast1-docker.pkg.dev
        
        # Create Dockerfile
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim

        # Set working directory
        WORKDIR /app

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            curl \
            && rm -rf /var/lib/apt/lists/*

        # Copy requirements first for better caching
        COPY requirements.txt .
        COPY requirements-dev.txt .

        # Install Python dependencies
        RUN pip install --no-cache-dir -r requirements.txt

        # Copy application code
        COPY . .

        # Create non-root user
        RUN useradd --create-home --shell /bin/bash app \
            && chown -R app:app /app
        USER app

        # Health check
        HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:8000/health || exit 1

        # Expose port
        EXPOSE 8000

        # Run the application
        CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]
        EOF
        
        docker build -t asia-southeast1-docker.pkg.dev/maliev-website/maliev-website-artifact-dev/maliev-line-chatbot-service:${{ github.sha }} .
        docker push asia-southeast1-docker.pkg.dev/maliev-website/maliev-website-artifact-dev/maliev-line-chatbot-service:${{ github.sha }}

    - name: Checkout maliev-gitops repository
      uses: actions/checkout@v4
      with:
        repository: MALIEV-Co-Ltd/maliev-gitops
        token: ${{ secrets.GITOPS_PAT }}
        path: maliev-gitops

    - name: Install Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Update image tag in maliev-gitops using Kustomize
      run: |
        cd maliev-gitops/3-apps/line-chatbot-service/overlays/development
        kustomize edit set image asia-southeast1-docker.pkg.dev/maliev-website/maliev-website-artifact/maliev-line-chatbot-service=asia-southeast1-docker.pkg.dev/maliev-website/maliev-website-artifact-dev/maliev-line-chatbot-service:${{ github.sha }}
        
    - name: Commit and push changes
      run: |
        cd maliev-gitops
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add .
        git commit -m "Update line-chatbot-service image to ${{ github.sha }}"
        git push